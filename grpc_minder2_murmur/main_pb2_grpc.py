# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_minder2_murmur import database_pb2 as grpc__minder2__murmur_dot_database__pb2
from grpc_minder2_murmur import main_pb2 as grpc__minder2__murmur_dot_main__pb2
from grpc_minder2_murmur import murmur_pb2 as grpc__minder2__murmur_dot_murmur__pb2


class MurmurServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/grpc_minder2_murmur.MurmurService/Create',
                request_serializer=grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.SerializeToString,
                response_deserializer=grpc__minder2__murmur_dot_main__pb2.Void.FromString,
                )
        self.Destroy = channel.unary_unary(
                '/grpc_minder2_murmur.MurmurService/Destroy',
                request_serializer=grpc__minder2__murmur_dot_murmur__pb2.DestroyRequest.SerializeToString,
                response_deserializer=grpc__minder2__murmur_dot_main__pb2.Void.FromString,
                )
        self.GetImage = channel.unary_unary(
                '/grpc_minder2_murmur.MurmurService/GetImage',
                request_serializer=grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.SerializeToString,
                response_deserializer=grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.FromString,
                )


class MurmurServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MurmurServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.FromString,
                    response_serializer=grpc__minder2__murmur_dot_main__pb2.Void.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=grpc__minder2__murmur_dot_murmur__pb2.DestroyRequest.FromString,
                    response_serializer=grpc__minder2__murmur_dot_main__pb2.Void.SerializeToString,
            ),
            'GetImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImage,
                    request_deserializer=grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.FromString,
                    response_serializer=grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_minder2_murmur.MurmurService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MurmurService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_minder2_murmur.MurmurService/Create',
            grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.SerializeToString,
            grpc__minder2__murmur_dot_main__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_minder2_murmur.MurmurService/Destroy',
            grpc__minder2__murmur_dot_murmur__pb2.DestroyRequest.SerializeToString,
            grpc__minder2__murmur_dot_main__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_minder2_murmur.MurmurService/GetImage',
            grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.SerializeToString,
            grpc__minder2__murmur_dot_murmur__pb2.MurmurContainer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/grpc_minder2_murmur.DatabaseService/Create',
                request_serializer=grpc__minder2__murmur_dot_database__pb2.DatabaseContainer.SerializeToString,
                response_deserializer=grpc__minder2__murmur_dot_main__pb2.Void.FromString,
                )
        self.Destroy = channel.unary_unary(
                '/grpc_minder2_murmur.DatabaseService/Destroy',
                request_serializer=grpc__minder2__murmur_dot_database__pb2.DestroyRequest.SerializeToString,
                response_deserializer=grpc__minder2__murmur_dot_main__pb2.Void.FromString,
                )


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=grpc__minder2__murmur_dot_database__pb2.DatabaseContainer.FromString,
                    response_serializer=grpc__minder2__murmur_dot_main__pb2.Void.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=grpc__minder2__murmur_dot_database__pb2.DestroyRequest.FromString,
                    response_serializer=grpc__minder2__murmur_dot_main__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_minder2_murmur.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_minder2_murmur.DatabaseService/Create',
            grpc__minder2__murmur_dot_database__pb2.DatabaseContainer.SerializeToString,
            grpc__minder2__murmur_dot_main__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_minder2_murmur.DatabaseService/Destroy',
            grpc__minder2__murmur_dot_database__pb2.DestroyRequest.SerializeToString,
            grpc__minder2__murmur_dot_main__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
